import { createSlice } from "@reduxjs/toolkit";

// BaÅŸlangÄ±Ã§ durumu (Redux state'in baÅŸlangÄ±Ã§ deÄŸerleri)
const initialState = {
  provider: null, // Ethereum saÄŸlayÄ±cÄ±sÄ± (MetaMask Ã¼zerinden alÄ±nan provider)
  signer: null, // KullanÄ±cÄ±nÄ±n iÅŸlemleri imzalamasÄ±nÄ± saÄŸlayan Ethereum signer
  address: null, // KullanÄ±cÄ±nÄ±n baÄŸlandÄ±ÄŸÄ± cÃ¼zdan adresi
  account: null, // KullanÄ±cÄ±nÄ±n MetaMask'ta seÃ§tiÄŸi ilk hesabÄ±n adresi
};

// ğŸ“Œ Redux slice (dilim) oluÅŸturuyoruz (Bu, Redux store'un bir parÃ§asÄ±dÄ±r)
export const dataSlice = createSlice({
  name: "data", // Slice'in adÄ± (Redux state iÃ§inde "data" olarak eriÅŸilecek)
  initialState, // BaÅŸlangÄ±Ã§ durumunu belirtiyoruz
  reducers: {
    // Redux state'i gÃ¼ncellemek iÃ§in reducer fonksiyonlarÄ±
    setProvider: (state, action) => {
      state.provider = action.payload;
    },

    setSigner: (state, action) => {
      state.signer = action.payload;
    },

    setAddress: (state, action) => {
      state.address = action.payload;
    },

    setAccount: (state, action) => {
      state.account = action.payload;
    },
  },
});

//Reducer fonksiyonlarÄ± iÃ§in aksiyonlarÄ± dÄ±ÅŸa aktarÄ±yoruz (BunlarÄ± bileÅŸenlerde Ã§aÄŸÄ±rabiliriz)
export const { setProvider, setSigner, setAddress, setAccount } =
  dataSlice.actions;

//Reducer'Ä± dÄ±ÅŸa aktarÄ±yoruz (Redux store'a eklemek iÃ§in)
export default dataSlice.reducer;
